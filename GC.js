垃圾回收也就是GC(Garbage Collection)

GC把程序不用的内存空间视为垃圾，找到它们并且将它们回收，让程序员可以再次利用这部分空间。

不是所有的语言都有GC，一般存在于高级语言中，如Java、JavaScript、Python。那么在没有GC的世界里，程序员就比较辛苦，只能手动去管理内存，比如在C语言中我们可以通过malloc/free，在C++中的new/delete来进行管理。


7
 垃圾回收算法

因为这一部分的内容很多，本文只进行简单的讲解，如果想深入了解垃圾回收算法的同学可以在文末获取学习资料。

GC标记-清除算法

世界上首个值得纪念的GC算法是GC标记-清除算法。因为自其问世以来，一直到半个世纪后的今天，它依然是各种处理程序所用的伟大的算法。

GC标记-清除算法由标记阶段和清除阶段构成，标记阶段将所有的活动对象做上相应的标记，清除阶段把那些没有标记的对象，也就是非活动对象进行回收。在搜索对象并进行标记的时候使用了深度优先搜索，尽可能的从深度上搜索树形结构。

优点：
1.算法简单，实现容易。
2.与保守式的GC算法兼容。
缺点：
1.在使用过程中会出现碎片化的情况，如同Windows的文件系统一样，导致无数的小分块散布在堆的各个地方。
2.分配速度，由于分块的不连续性，算法每次分配的时候都需要遍历空闲链表为了找到足够大的分块，这样最糟糕的情况就是遍历到最后才找到合适的分块，影响了分配速度。

引用计数法

这种方法中引入了计数器的概念，通过计数器来表示对象的“人气指数”，也就是有多少个程序引用了这个对象。当计数器(引用数)为0时，垃圾立刻被回收。

优点:
1.可以立即回收垃圾。
2.最大暂停的时间短。
3.并且没有必要沿指针查找。

缺点:
1.上文提到过的循环引用无法回收。
2.并且实现起来很复杂。
3.计数器值的增减处理十分繁重。
4.同时计数器需要占很多位，导致内存空间的使用效率大大降低。